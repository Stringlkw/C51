C51 COMPILER V9.54   KEY                                                                   01/22/2021 20:29:47 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE KEY
OBJECT MODULE PLACED IN key.OBJ
COMPILER INVOKED BY: D:\Program Files (x86)\keil5\C51\BIN\C51.exe key.c

line level    source

   1          // #include "key.h"
   2          
   3          // uchar code KeyCodeMap[4][4] = {
   4          //     //矩阵按键编号到标准键盘键码的映射表
   5          //     {'1', '2', '3', 0x26},  //数字键1、数字键2、数字键3、向上键
   6          //     {'4', '5', '6', 0x25},  //数字键4、数字键5、数字键6、向左键
   7          //     {'7', '8', '9', 0x28},  //数字键7、数字键8、数字键9、向下键
   8          //     {'0', 0x1B, 0x0D, 0x27} //数字键0、ESC键、  回车键、 向右键
   9          // };
  10          // uchar pdata KeyState[4][4] = { //全部矩阵按键的当前状态
  11          //     {1, 1, 1, 1},
  12          //     {1, 1, 1, 1},
  13          //     {1, 1, 1, 1},
  14          //     {1, 1, 1, 1}};
  15          
  16          // /* 按键驱动函数，检测按键动作，调度相应动作函数，需在主循环中调用 */
  17          // void KeyDriver()
  18          // {
  19          //     uchar i, j;
  20          //     static uchar pdata keyPre[4][4] = {//按键值备份，保存前一次的值
  21          //                                        {1, 1, 1, 1},
  22          //                                        {1, 1, 1, 1},
  23          //                                        {1, 1, 1, 1},
  24          //                                        {1, 1, 1, 1}};
  25          //     for (i = 0; i < 4; i++)
  26          //     {
  27          //         for (j = 0; j < 4; j++)
  28          //         {
  29          //             if (keyPre[i][j] != KeyState[i][j])
  30          //             {
  31          //                 if (keyPre[i][j] != 0)
  32          //                 {
  33          //                     KeyAction(KeyCodeMap[i][j]); //调用按键动作函数
  34          //                 }
  35          //                 keyPre[i][j] = KeyState[i][j];
  36          //             }
  37          //         }
  38          //     }
  39          // }
  40          
  41          // /* 按键扫描函数，需在定时中断中调用，推荐调用间隔1ms */
  42          // void KeyScan()
  43          // {
  44          //     uchar i;
  45          //     static uchar keyout = 0;     //矩阵按键扫描输出索引
  46          //     static uchar keybuf[4][4] = {//矩阵按键扫描缓冲区
  47          //                                  {0xFF, 0xFF, 0xFF, 0xFF},
  48          //                                  {0xFF, 0xFF, 0xFF, 0xFF},
  49          //                                  {0xFF, 0xFF, 0xFF, 0xFF},
  50          //                                  {0xFF, 0xFF, 0xFF, 0xFF}};
  51          
  52          //     //将一行的4个按键值移入缓冲区
  53          //     keybuf[keyout][0] = (keybuf[keyout][0] << 1) | KEY_IN_1;
  54          //     keybuf[keyout][1] = (keybuf[keyout][1] << 1) | KEY_IN_2;
  55          //     keybuf[keyout][2] = (keybuf[keyout][2] << 1) | KEY_IN_3;
C51 COMPILER V9.54   KEY                                                                   01/22/2021 20:29:47 PAGE 2   

  56          //     keybuf[keyout][3] = (keybuf[keyout][3] << 1) | KEY_IN_4;
  57          //     //消抖后更新按键状态
  58          //     for (i = 0; i < 4; i++) //每行4个按键，所以循环4次
  59          //     {
  60          //         if ((keybuf[keyout][i] & 0x0F) == 0x00)
  61          //         { //连续4次扫描值为0，即4*4ms内都是按下状态时，可认为按键已稳定的按
             -下
  62          //             KeyState[keyout][i] = 0;
  63          //         }
  64          //         else if ((keybuf[keyout][i] & 0x0F) == 0x0F)
  65          //         { //连续4次扫描值为1，即4*4ms内都是弹起状态时，可认为按键已稳定的弹
             -起
  66          //             KeyState[keyout][i] = 1;
  67          //         }
  68          //     }
  69          //     //执行下一次的扫描输出
  70          //     keyout++;               //输出索引递增
  71          //     keyout = keyout & 0x03; //索引值加到4即归零
  72          //     switch (keyout)         //根据索引，释放当前输出引脚，拉低下次的输出引脚
  73          //     {
  74          //     case 0:
  75          //         KEY_OUT_4 = 1;
  76          //         KEY_OUT_1 = 0;
  77          //         break;
  78          //     case 1:
  79          //         KEY_OUT_1 = 1;
  80          //         KEY_OUT_2 = 0;
  81          //         break;
  82          //     case 2:
  83          //         KEY_OUT_2 = 1;
  84          //         KEY_OUT_3 = 0;
  85          //         break;
  86          //     case 3:
  87          //         KEY_OUT_3 = 1;
  88          //         KEY_OUT_4 = 0;
  89          //         break;
  90          //     default:
  91          //         break;
  92          //     }
  93          // }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   ----    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
