C51 COMPILER V9.54   DS18B20                                                               01/22/2021 20:13:34 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE DS18B20
OBJECT MODULE PLACED IN ds18b20.OBJ
COMPILER INVOKED BY: D:\Program Files (x86)\keil5\C51\BIN\C51.exe ds18b20.c

line level    source

   1          #include "ds18B20.h"
   2          
   3          
   4          uchar a,b;
   5          /*******************************************DS18B20*************************************************/
   6          /**
   7            *输入：无
   8            *输出：0/1
   9            */
  10          void Display(uint Tem)
  11          {
  12   1              uchar count;
  13   1              lcd12864SetPos(2,3);
  14   1              if((Tem >> 12) & 0x0001)
  15   1              {
  16   2                      lcd12864WriteChar('-');
  17   2                      Tem = ~Tem + 1;
  18   2              }
  19   1              else
  20   1              {
  21   2                      lcd12864WriteChar('+');
  22   2              }
  23   1              Tem = Tem * 0.625;
  24   1              
  25   1              count = Tem /1000;
  26   1              if(count != 0)
  27   1              {
  28   2                      lcd12864WriteChar(count+48);
  29   2              }
  30   1              count = Tem /100 %10;
  31   1              lcd12864WriteChar(count+48);
  32   1              count = Tem / 10 % 10;
  33   1              lcd12864WriteChar(count+48);
  34   1              lcd12864WriteChar('.');
  35   1              count = Tem % 10;
  36   1              lcd12864WriteChar(count+48);
  37   1              lcd12864WriteChar(' ');
  38   1      }
  39          uchar DS_Init()
  40          {
  41   1              uchar flag = 0;
  42   1              DS_data = 0;
  43   1          /*500us*/
  44   1              for(b=251;b>0;b--)
  45   1              for(a=4;a>0;a--);
  46   1          _nop_();
  47   1              DS_data = 1;            //释放总线
  48   1          /*15us*/
  49   1              for(b=1;b>0;b--)
  50   1              for(a=38;a>0;a--);
  51   1          _nop_();
  52   1      
  53   1              while(DS_data == 1);
  54   1              while(DS_data == 0)
  55   1              {
C51 COMPILER V9.54   DS18B20                                                               01/22/2021 20:13:34 PAGE 2   

  56   2                      flag = 1;       
  57   2              }
  58   1              DS_data = 1;
  59   1              return flag;                    
  60   1      }
  61          
  62          void DS_Write(uchar cmd)
  63          {
  64   1              uchar i;
  65   1              for(i = 0; i < 8; i++)
  66   1              {
  67   2                      DS_data = 0;
  68   2                      /*2us*/
  69   2                      for(a=4;a>0;a--);
  70   2                      DS_data = ((cmd >> i) & 0x01);
  71   2                  /*60us*/
  72   2                      for(a=164;a>0;a--);
  73   2              _nop_();
  74   2                      DS_data = 1; 
  75   2              }
  76   1      }
  77          
  78          uchar DS_Read()
  79          {
  80   1              uchar dat = 0x00;
  81   1              uchar i,num;
  82   1              for(i = 0; i < 8;i++)
  83   1              {
  84   2                      DS_data = 0;
  85   2                      /*2us*/
  86   2                      for(a=4;a>0;a--);
  87   2                      DS_data = 1;
  88   2                      /*6us*/
  89   2                      for(a=15;a>0;a--);
  90   2                      num = DS_data;
  91   2                      dat     = (dat | (num << i));
  92   2                  /*60us*/
  93   2                      for(a=164;a>0;a--);
  94   2              _nop_();
  95   2      //              DS_data = 1;
  96   2              }
  97   1              return dat;
  98   1      }
  99          
 100          uint get_temp()
 101          {
 102   1              uchar flag;
 103   1              uint temperature = 0x0000;
 104   1              uchar LSB,MSB;
 105   1              flag = DS_Init();
 106   1              delay1ms();
 107   1              if(flag)
 108   1              {
 109   2                      DS_Write(0xcc);
 110   2                      DS_Write(0x44);
 111   2                      delay1s();
 112   2                      flag = DS_Init();
 113   2                      delay1ms();
 114   2                      if(flag)
 115   2                      {
 116   3                              DS_Write(0xcc);
 117   3                              DS_Write(0xBE);
C51 COMPILER V9.54   DS18B20                                                               01/22/2021 20:13:34 PAGE 3   

 118   3                              LSB = DS_Read();
 119   3                              MSB = DS_Read();
 120   3                              temperature = MSB;
 121   3                              temperature <<= 8;
 122   3                              temperature |= LSB;
 123   3                              return temperature;
 124   3                      }
 125   2                      else
 126   2                      {
 127   3                              return 00;
 128   3                      }
 129   2              }
 130   1              else
 131   1              {
 132   2                      return 00;
 133   2              }               
 134   1      }
 135          
 136          void write_storage(uchar MAX,uchar MIN)
 137          {
 138   1              uchar flag;
 139   1              flag = DS_Init();
 140   1              delay1ms();
 141   1              if(flag)
 142   1              {
 143   2                      DS_Write(0xcc);
 144   2                      DS_Write(0x4E);
 145   2                      DS_Write(MAX);
 146   2                      DS_Write(MIN);
 147   2              }
 148   1              flag = DS_Init();
 149   1              delay1ms();
 150   1              if(flag)
 151   1              {
 152   2                      DS_Write(0xcc);
 153   2                      DS_Write(0x48);
 154   2              }       
 155   1      }
 156          /***************************************************************************************************/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    453    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      2       9
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
